;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: foreach %s %t wasm-opt -all --gufa --optimize-level=2 -S -o - | filecheck %s --check-prefix=OPT_2
;; RUN: foreach %s %t wasm-opt -all --gufa --optimize-level=3 -S -o - | filecheck %s --check-prefix=OPT_3

;; Compare the behavior at optimization level 2 and 3. At 3 we will add all the
;; casts we possibly can infer.

(module
  ;; OPT_2:      (type $none_=>_none (func))

  ;; OPT_2:      (type $A (struct ))
  ;; OPT_3:      (type $A (struct ))
  (type $A (struct))

  ;; OPT_2:      (type $B (sub $A (struct )))
  ;; OPT_3:      (type $B (sub $A (struct )))
  (type $B (sub $A (struct)))

  ;; OPT_2:      (export "export" (func $func))

  ;; OPT_2:      (func $func (type $none_=>_none)
  ;; OPT_2-NEXT:  (local $a (ref $A))
  ;; OPT_2-NEXT:  (local.set $a
  ;; OPT_2-NEXT:   (struct.new_default $B)
  ;; OPT_2-NEXT:  )
  ;; OPT_2-NEXT:  (drop
  ;; OPT_2-NEXT:   (local.get $a)
  ;; OPT_2-NEXT:  )
  ;; OPT_2-NEXT: )
  ;; OPT_3:      (type $none_=>_none (func))

  ;; OPT_3:      (export "export" (func $func))

  ;; OPT_3:      (func $func (type $none_=>_none)
  ;; OPT_3-NEXT:  (local $a (ref $A))
  ;; OPT_3-NEXT:  (local.set $a
  ;; OPT_3-NEXT:   (struct.new_default $B)
  ;; OPT_3-NEXT:  )
  ;; OPT_3-NEXT:  (drop
  ;; OPT_3-NEXT:   (ref.cast $B
  ;; OPT_3-NEXT:    (local.get $a)
  ;; OPT_3-NEXT:   )
  ;; OPT_3-NEXT:  )
  ;; OPT_3-NEXT: )
  (func $func (export "export")
    (local $a (ref $A))
    (local.set $a
      (struct.new $B)
    )
    (drop
      ;; We can infer that this contains B, and add a cast to that type, when
      ;; the optimization level is 3.
      (local.get $a)
    )
  )
)
