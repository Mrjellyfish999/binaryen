;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_passes_tests_to_lit.py and could be cleaned up.

;; RUN: foreach %s %t wasm-opt --directize      -all -S -o - | filecheck %s --check-prefix=CHECK
;; RUN: foreach %s %t wasm-opt --directize -tnh -all -S -o - | filecheck %s --check-prefix=TNH__

(module
  ;; CHECK:      (type $t1 (func))
  ;; TNH__:      (type $t1 (func))
  (type $t1 (func))

  (type $t2 (func))

  (type $t3 (func))

  ;; CHECK:      (type $ref|$t1|_ref|$t1|_ref|$t1|_=>_none (func (param (ref $t1) (ref $t1) (ref $t1))))

  ;; CHECK:      (func $caller (type $ref|$t1|_ref|$t1|_ref|$t1|_=>_none) (param $t1 (ref $t1)) (param $t2 (ref $t1)) (param $t3 (ref $t1))
  ;; CHECK-NEXT:  (call_ref $t1
  ;; CHECK-NEXT:   (local.get $t1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call_ref $t1
  ;; CHECK-NEXT:   (local.get $t1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call_ref $t1
  ;; CHECK-NEXT:   (local.get $t1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; TNH__:      (type $ref|$t1|_ref|$t1|_ref|$t1|_=>_none (func (param (ref $t1) (ref $t1) (ref $t1))))

  ;; TNH__:      (func $caller (type $ref|$t1|_ref|$t1|_ref|$t1|_=>_none) (param $t1 (ref $t1)) (param $t2 (ref $t1)) (param $t3 (ref $t1))
  ;; TNH__-NEXT:  (call_ref $t1
  ;; TNH__-NEXT:   (local.get $t1)
  ;; TNH__-NEXT:  )
  ;; TNH__-NEXT:  (call_ref $t1
  ;; TNH__-NEXT:   (local.get $t1)
  ;; TNH__-NEXT:  )
  ;; TNH__-NEXT:  (call_ref $t1
  ;; TNH__-NEXT:   (local.get $t1)
  ;; TNH__-NEXT:  )
  ;; TNH__-NEXT: )
  (func $caller (param $t1 (ref $t1)) (param $t2 (ref $t2)) (param $t3 (ref $t3))
    ;; This will trap, so we can emit an unreachable.
    (call_ref $t1
      (local.get $t1)
    )
    ;; This has a single possible target, so we can directize.
    (call_ref $t1
      (local.get $t1)
    )
    ;; This has multiple targets, so we cannot optimize.
    (call_ref $t1
      (local.get $t1)
    )
  )

  ;; CHECK:      (func $t1-trap (type $t1)
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  ;; TNH__:      (func $t1-trap (type $t1)
  ;; TNH__-NEXT:  (unreachable)
  ;; TNH__-NEXT: )
  (func $t1-trap (type $t1)
    (unreachable)
  )

  ;; CHECK:      (func $t2-0 (type $t1)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; TNH__:      (func $t2-0 (type $t1)
  ;; TNH__-NEXT:  (drop
  ;; TNH__-NEXT:   (i32.const 0)
  ;; TNH__-NEXT:  )
  ;; TNH__-NEXT: )
  (func $t2-0 (type $t2)
    (drop
      (i32.const 0)
    )
  )

  ;; CHECK:      (func $t3-0 (type $t1)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; TNH__:      (func $t3-0 (type $t1)
  ;; TNH__-NEXT:  (drop
  ;; TNH__-NEXT:   (i32.const 0)
  ;; TNH__-NEXT:  )
  ;; TNH__-NEXT: )
  (func $t3-0 (type $t3)
    (drop
      (i32.const 0)
    )
  )

  ;; CHECK:      (func $t3-1 (type $t1)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; TNH__:      (func $t3-1 (type $t1)
  ;; TNH__-NEXT:  (drop
  ;; TNH__-NEXT:   (i32.const 1)
  ;; TNH__-NEXT:  )
  ;; TNH__-NEXT: )
  (func $t3-1 (type $t3)
    (drop
      (i32.const 1)
    )
  )
)
