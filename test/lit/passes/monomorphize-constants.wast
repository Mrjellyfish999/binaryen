;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: foreach %s %t wasm-opt --monomorphize-always -S -o - | filecheck %s

(module
  ;; CHECK:      (type $i32_=>_none (func (param i32)))

  ;; CHECK:      (import "a" "b" (global $g i32))
  (import "a" "b" (global $g i32))

  ;; CHECK:      (func $foo (param $x i32)
  ;; CHECK-NEXT:  (call $bar_0
  ;; CHECK-NEXT:   (i32.const 10)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $bar_1
  ;; CHECK-NEXT:   (i32.const 20)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $bar
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $bar_2
  ;; CHECK-NEXT:   (global.get $g)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $foo (param $x i32)
    ;; We can monomorphize both of these.
    (call $bar
      (i32.const 10)
    )
    (call $bar
      (i32.const 20)
    )
    ;; This cannot be monomorphized, as it is not a constant.
    (call $bar
      (local.get $x)
    )
    ;; But an immutable global can.
    (call $bar
      (global.get $g)
    )
  )

  ;; CHECK:      (func $bar (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $bar (param $x i32)
    (drop
      (local.get $x)
    )
  )
)
;; CHECK:      (func $bar_0 (param $x i32)
;; CHECK-NEXT:  (local.set $x
;; CHECK-NEXT:   (i32.const 10)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (drop
;; CHECK-NEXT:   (local.get $x)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $bar_1 (param $x i32)
;; CHECK-NEXT:  (local.set $x
;; CHECK-NEXT:   (i32.const 20)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (drop
;; CHECK-NEXT:   (local.get $x)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $bar_2 (param $x i32)
;; CHECK-NEXT:  (local.set $x
;; CHECK-NEXT:   (global.get $g)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (drop
;; CHECK-NEXT:   (local.get $x)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
