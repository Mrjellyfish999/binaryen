;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
  ;; RUN: foreach %s %t wasm-opt -all --gufa -tnh -S -o - | filecheck %s

  (module


    ;; CHECK:      (type $funcref_funcref_funcref_funcref_=>_none (func (param funcref funcref funcref funcref)))

    ;; CHECK:      (type $funcref_ref|func|_=>_none (func (param funcref (ref func))))

    ;; CHECK:      (type $none_=>_funcref (func (result funcref)))

    ;; CHECK:      (type $none_=>_ref|func| (func (result (ref func))))

    ;; CHECK:      (import "a" "b" (global $unknown-i32 i32))
    (import "a" "b" (global $unknown-i32 i32))

    ;; CHECK:      (import "a" "b" (global $unknown-funcref1 funcref))
    (import "a" "b" (global $unknown-funcref1 funcref))

    ;; CHECK:      (import "a" "b" (global $unknown-funcref2 funcref))
    (import "a" "b" (global $unknown-funcref2 funcref))

    ;; CHECK:      (import "a" "b" (global $unknown-nn-func1 (ref func)))
    (import "a" "b" (global $unknown-nn-func1 (ref func)))

    ;; CHECK:      (import "a" "b" (global $unknown-nn-func2 (ref func)))
    (import "a" "b" (global $unknown-nn-func2 (ref func)))

    ;; CHECK:      (func $called (type $funcref_funcref_funcref_funcref_=>_none) (param $x funcref) (param $no-cast funcref) (param $y funcref) (param $z funcref)
    ;; CHECK-NEXT:  (drop
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (local.get $x)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT:  (drop
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (local.get $y)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT:  (drop
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (local.get $z)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT: )
    (func $called (param $x funcref) (param $no-cast funcref) (param $y funcref) (param $z funcref)
      ;; All but the second parameter are cast here, which allows some
      ;; optimization in the caller.
      (drop
        (ref.cast func
          (local.get $x)
        )
      )
      (drop
        (ref.cast func
          (local.get $y)
        )
      )
      (drop
        (ref.cast func
          (local.get $z)
        )
      )
    )

    ;; CHECK:      (func $caller (type $funcref_ref|func|_=>_none) (param $f funcref) (param $F (ref func))
    ;; CHECK-NEXT:  (call $called
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (global.get $unknown-funcref1)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:   (global.get $unknown-funcref1)
    ;; CHECK-NEXT:   (global.get $unknown-funcref1)
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (global.get $unknown-funcref1)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT:  (call $called
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (global.get $unknown-funcref2)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:   (global.get $unknown-funcref2)
    ;; CHECK-NEXT:   (global.get $unknown-funcref2)
    ;; CHECK-NEXT:   (ref.as_func
    ;; CHECK-NEXT:    (global.get $unknown-funcref2)
    ;; CHECK-NEXT:   )
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT: )
    (func $caller (param $f funcref) (param $F (ref func))
      ;; All but the third parameter are cast here. The cast has no effect by
      ;; itself as the type is funcref, but GUFA will refine casts when it can
      ;; (but not add a new cast, which might not be worth it).
      ;;
      ;; Specifically here, the first and last cast can be refined, since those
      ;; are cast both here and in the called function. Those casts will lose the
      ;; "null" and become non-nullable.
      (call $called
        (ref.cast null func
          (global.get $unknown-funcref1)
        )
        (ref.cast null func
          (global.get $unknown-funcref1)
        )
        (global.get $unknown-funcref1)
        (ref.cast null func
          (global.get $unknown-funcref1)
        )
      )
      ;; A second call with other values, to prevent GUFA from inferring a
      ;; single global for each parameter and making this trivial.
      (call $called
        (ref.cast null func
          (global.get $unknown-funcref2)
        )
        (ref.cast null func
          (global.get $unknown-funcref2)
        )
        (global.get $unknown-funcref2)
        (ref.cast null func
          (global.get $unknown-funcref2)
        )
      )
    )

    ;; CHECK:      (func $get-funcref (type $none_=>_funcref) (result funcref)
    ;; CHECK-NEXT:  (select (result funcref)
    ;; CHECK-NEXT:   (global.get $unknown-funcref1)
    ;; CHECK-NEXT:   (global.get $unknown-funcref2)
    ;; CHECK-NEXT:   (global.get $unknown-i32)
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT: )
    (func $get-funcref (result funcref)
      ;; Helper to get an unknown (ref func) value (both the value is not known,
      ;; and we do not know which global it is in).
      (select
        (global.get $unknown-funcref1)
        (global.get $unknown-funcref2)
        (global.get $unknown-i32)
      )
    )

    ;; CHECK:      (func $get-nn-func (type $none_=>_ref|func|) (result (ref func))
    ;; CHECK-NEXT:  (select (result (ref func))
    ;; CHECK-NEXT:   (global.get $unknown-nn-func1)
    ;; CHECK-NEXT:   (global.get $unknown-nn-func2)
    ;; CHECK-NEXT:   (global.get $unknown-i32)
    ;; CHECK-NEXT:  )
    ;; CHECK-NEXT: )
    (func $get-nn-func (result (ref func))
      ;; Helper to get an unknown (ref func) value.
      (select
        (global.get $unknown-nn-func1)
        (global.get $unknown-nn-func2)
        (global.get $unknown-i32)
      )
    )
  )
